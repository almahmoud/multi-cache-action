name: 'Restore cache from a list of keys'
description: 'Allows restoring cache from a list of keys, which can be programmatically generated in the workflow.'
branding:
  icon: 'archive'
  color: 'purple'
inputs:
  keys:
    description: "List of keys to restore as a quoted, comma-separated list, eg 'pkg1','pkg2'"
    required: true
  paths:
    description: "List of paths to restore as a quoted, comma-separated list, eg '/tmp/pkgs','/my/library'"
    required: true
  install-node:
    description: "true/false flag for whether to run the `actions/setup-node` action"
    required: false
    default: 'true'
outputs:
  restored-list:
    description: "List of keys successfully restored"
    value: ${{ steps.script.outputs.successfulKeys }}
  failed-list:
    description: "List of keys failed to restore"
    value: ${{ steps.script.outputs.failedKeys }}
runs:
  using: "composite"
  steps:
      - uses: actions/setup-node@v4
        if: ${{ inputs.install-node == 'true' }}
      - name: Install NPM package
        shell: sh
        run: npm install @actions/cache
      - uses: actions/github-script@v7
        id: script
        name: Restore cache script
        with:
          script: |
            const cache = require('@actions/cache');
            const core = require('@actions/core');
            const paths = [
                ${{ inputs.paths }}
            ]
            const keyList = [
                ${{ inputs.keys }}
            ]
            
            const restoreKeys = [];

            const successfulKeys = [];
            const failedKeys = [];

            for (const key of keyList) {
              const cacheKey = await cache.restoreCache(paths, key, restoreKeys)
              if (cacheKey) {
                console.log(`Cache restore successful for key: ${cacheKey}`);
                successfulKeys.push(cacheKey);
              } else {
                console.log(`No cache found for key: ${key}`);
                failedKeys.push(cacheKey);
              }        
            }

            const successfulKeysString = successfulKeys.join(',');
            const failedKeysString = failedKeys.join(',');
            core.setOutput('successfulKeys', successfulKeysString);
            core.setOutput('failedKeys', failedKeysString);
